{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","ctgs","name","id","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","image","GifExpertApp","categories","onClick","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAiB9C,OACI,uBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,UACI,8CACA,uBAAOO,KAAK,QAAQC,GAAG,QAAQC,KAAK,OAAOC,MAAOX,EAAYY,SAjB7C,SAACT,GACtBF,EAAcE,EAAEU,OAAOF,c,+BCPlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRiB,MAAOD,EAAIC,MACXT,IAAKQ,EAAIE,OAAOC,iBAAiBX,QATtB,kBAaZM,GAbY,4CAAH,sDCEPM,EAAc,SAAC,GAAsB,IAArBpB,EAAoB,EAApBA,GAAIiB,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IAGpC,OAFAa,QAAQC,IAAItB,EAAIiB,EAAOT,GAGnB,sBAAKe,UAAU,OAAf,UACI,qBAAKC,IAAKhB,EAAKiB,IAAKR,IACpB,4BAAIA,QCJHS,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACZhB,mBAAS,CAC/BuB,KAAM,GACNc,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAetC,OATAC,qBAAW,WACPzB,EAAQC,GAAUyB,MAAM,SAAAjB,GACpB,OAAOe,EAAS,CACZhB,KAAMC,EACNa,SAAS,SAGlB,CAACrB,IAEGsB,EDb0BI,CAAa1B,GAAjCY,EADwB,EAC7BL,KAAac,EADgB,EAChBA,QAErB,OACI,qCACI,6BAAKrB,IAEHqB,GAAW,2CAEb,qBAAKJ,UAAU,WAAf,SAEQL,EAAOH,KAAK,SAAAkB,GACR,OAAO,cAAC,EAAD,eAAgCA,GAAdA,EAAMjC,aEX1CkC,EAAe,WAAM,MAEM5C,mBAAS,CAAC,mBAFhB,mBAEvB6C,EAFuB,KAEX9C,EAFW,KAQ9B,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,wBAAQ+C,QATE,WACd/C,EAAc,GAAD,mBAAK8C,GAAL,CAAiB,OAQ1B,iBACA,6BAEIA,EAAWpB,KAAI,SAAAT,GACX,OAAO,oBAAIiB,UAAU,sDAAd,SACK,cAAC,EAAD,CAASjB,SAAUA,KADiDA,Y,MCjBpG+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7538a451.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputValue = (e) => {\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories(ctgs => [inputValue, ...ctgs]);\n            setInputValue('');\n        }\n\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <h3>Add Category</h3>\n            <input name=\"categ\" id=\"categ\" type=\"text\" value={inputValue} onChange={handleInputValue} />\n        </form>\n    )\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n};\n\n\n\n","export const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=6Jg4UXSNNJKDsR2EpcGaru527ZIL7vQZ`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        };\n    });\n\n    return gifs;\n};","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n    console.log(id, title, url);\n\n    return (\n        <div className='card'>\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from '../components/GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n    const { data:images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h4>{category}</h4>\n\n            { loading && <p>Loading...</p> }\n\n            <div className='cardGrid'>\n                {\n                    images.map( image => {\n                        return <GifGridItem key={image.id} {...image} />;\n                    })\n                }\n            </div>\n        </>\n    );\n};\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs(category).then( gifs => {\n            return setState({\n                data: gifs,\n                loading: false\n            });\n        });\n    }, [category]);\n\n    return state;\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nexport const GifExpertApp = () => {\n    // const categories = ['Queen Gambit', 'Peaky Blinders', 'Modern Family'];\n    const [categories, setCategories] = useState([\"Queen's Gambit\"])\n\n    const handleAdd = () => {\n        setCategories([...categories, '']);\n    }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <hr/>\n            <AddCategory setCategories={setCategories}/>\n            <button onClick={handleAdd}>Add</button>\n            <ol>\n                {\n                categories.map(category => {\n                    return <li className=\"animate__animated animate__backInDown animate__slow\" key={category}>\n                                <GifGrid category={category}/>\n                            </li>;\n                })\n                }\n            </ol>\n        </>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}